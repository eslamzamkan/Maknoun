package StepDef;

import Pages.Locators;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import org.openqa.selenium.By;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.time.Duration;

public class Actions {

    Locators loc = new Locators(); // Instantiate Locators class
    public static String challengeCode; // Shared variable for teacher and student cycle

    // Teacher cycle
    @Given("user select teacher")
    public void userSelectTeacher() {
        loc.select_teacher().click();
    }

    @And("Teacher Enter his name")
    public void teacherEnterHisName() {
        loc.Enter_Teacher_name().sendKeys("Islam Gamal");
        loc.Enter_next_to_pic().click();
    }

    @And("Teacher choose his photo")
    public void teacherChooseHisPhoto() {
        loc.select_picture().click();
    }

    @And("Teacher click next")
    public void teacherClickNext() {
        loc.select_next().click();
    }

    @And("Teacher choose add and subtract challenge")
    public void teacherChooseAddAndSubtractChallenge() {
        loc.add_subtract().click();
    }

    @And("Teacher start the challenge")
    public void teacherStartTheChallenge() {
        loc.start_challenge().click();
    }

    @And("Teacher create new challenge")
    public void teacherCreateNewChallenge() {
        loc.create_new_challenge().click();

        // Wait for the challenge code element to be visible
        WebDriverWait wait = new WebDriverWait(Hooks.driver, Duration.ofSeconds(30));
        try {
            WebElement challengeCodeElement = wait.until(ExpectedConditions.visibilityOf(loc.get_challenge_code()));
            challengeCode = challengeCodeElement.getText();
            System.out.println("Challenge Code Generated by Teacher: " + challengeCode);
        } catch (TimeoutException e) {
            System.err.println("Failed to retrieve the challenge code. Ensure the challenge code element is visible.");
            throw new IllegalStateException("Failed to retrieve challenge code. Please check the application.");
        }
    }

    @Then("start challenge after student enter code")
    public void startChallengeAfterStudentEnterCode() {
        loc.start_challenge_after_student_enter_code().click();
    }

    // Student cycle
    @Given("user select student")
    public void userSelectStudent() {
        loc.select_student().click();
    }

    @And("student choose his name")
    public void studentChooseHisName() {
        loc.Enter_Student_Name().sendKeys("Ahmed Ali");
        loc.select_next_student_name().click();
    }

    @And("student choose his photo")
    public void studentChooseHisPhoto() {
        loc.select_photo().click();
    }

    @And("student select next")
    public void studentSelectNext() {
        loc.student_select_next().click();
        Hooks.clearCache();
    }

    @And("student enter challenge code")
    public void studentEnterChallengeCode() {
        if (challengeCode == null || challengeCode.isEmpty()) {
            throw new IllegalStateException("Challenge code is not set. Teacher must create a challenge first.");
        }
        System.out.println("Challenge Code Received by Student: " + challengeCode);
        // Wait for the challenge code input field
        WebDriverWait wait = new WebDriverWait(Hooks.driver, Duration.ofSeconds(30));
        WebElement challengeCodeInput = wait.until(ExpectedConditions.visibilityOfElementLocated(
                By.xpath("//input[@ngmodel='input1']")
        ));
        // Enter the challenge code
        challengeCodeInput.sendKeys(challengeCode);

        // Submit the code (click the "Next" button or equivalent)
        loc.student_select_next().click();
    }
}
